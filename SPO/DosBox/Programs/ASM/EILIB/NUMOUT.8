;---------------                                 Copr.2000 Eric Isaacson
;   NUMOUT                                       See EILIB.TXT for terms
;---------------

; NUMOUT outputs a string of ASCII digits to DI-pointed memory, displaying
;    the value of DLAX in base BL.  The output will be at least BH bytes; if
;    there are fewer than BH digits, the output will be left-padded with
;    character DH.

; OUT_DEC_AX outputs decimal AX to ES:DI, advancing DI.

; OHEX_16 outputs hexadecimal AX to ES:DI, advancing DI.

; OCT_AX outputs octal AX to ES:DI, advancing DI.

; OCT_AL outputs octal AL to ES:DI, advancing DI.

BINHEX_AL  MACRO
  ADD AL,090H       ; these 4 lines convert AL into an ASCII hex digit,
  DAA               ;    in an outrageously clever and incomprehensible
  ADC AL,040H       ;    fashion!!!
  DAA               ;
#EM

; As with all output routines of this nature, we must face the problem that
; the digits are produced backwards in the calculation.  We handle this
; problem by outputting the backwards-digits to the final destination string,
; then reversing the string after we are done.

NUMOUT:
  PUSH DS,AX,CX,SI  ; preserve registers across call
  PUSH BX,DX,DI     ; preserve these registers during calculation phase
  MOV DS,ES         ; point both DS and ES to the output segment
  XCHG AX,DX        ; swap upper byte DL into AL
  CBW               ; extend the upper byte into an upper word
  XCHG DX,AX        ; swap the upper word back into DX
  MOV BH,0          ; upper byte of the numeric base is zero
  TEST DX           ; is our number DXAX negative?
  JNS >L0           ; skip if not (with No Carry set by the above TEST)
  NEG DX            ; number is negative: negate to positive
  NEG AX            ; both words are negated
  SBB DX,0          ; propagate Carry flag from lower word to upper word
  STC               ; Carry flag signals that we were negative
L0:
  PUSHF             ; push Carry if negative, NoCarry if positive
L1:                 ; loop here for each digit while number > 64K
  TEST DX           ; is the number still > 64K?
  JZ >L2            ; jump if not to the simpler, faster loop
  CALL DIV2         ; divide DXAX by BL
  XCHG AX,CX        ; swap the binary remainder into AL
  BINHEX_AL         ; convert to hex digit
  STOSB             ; store the mysteriously-obtained digit
  XCHG CX,AX        ; swap the low word of remaining quotient into AX
  JMP L1            ; jump to calculate the next-higher digit

L2:                 ; loop here for each digit when the number is < 64K
  DIV BX            ; divide remaining quotient AX by the base BL
  XCHG AX,DX        ; swap the remainder into AL
  BINHEX_AL         ; convert to hex digit
  STOSB             ; store the mysteriously-obtained digit
  XCHG DX,AX        ; swap the remaining quotient into AX
  MOV DL,0          ; clear out digit DL-- DH was already zero
  TEST AX           ; is our number exhausted?
  JNZ L2            ; loop if not to get another digit
  POPF              ; restore Carry is number was negative
  MOV AL,'-'        ; load minus sign in case it was negative
  IF C STOSB        ; output the minus sign if number was negative
  POP SI,DX,BX      ; restore registers-- original DI goes to SI
  MOV CL,BH         ; fetch the minimum output length
  MOV CH,0          ; high byte of minimum length is zero
  ADD CX,SI         ; add to string start to obtain minimum beyond-pointer
  SUB CX,DI         ; calculate number of left-fill bytes needed
  MOV AL,DH         ; fetch the fill-byte
  IF A REP STOSB    ; if fill-byte-count was positive then make the fill
  CALL REV_STRING   ; reverse the output string
  POP SI,CX,AX,DS   ; restore all the other clobbered registers
  RET               ; NoCarry set for disassembler MEMDIS_n's benefit


; DIV2 divides DXAX by BX, leaving the remainder in CX.

DIV2:               ; DXAX /= BX, rem = CX
  XCHG CX,AX        ; swap out the least significant word
  XCHG AX,DX        ; swap most significant into AX
  SUB DX,DX         ; will will divide 00DX by BX
  DIV BX            ; AX = high word of final quotient
  XCHG AX,CX        ; swap back original low word
  DIV BX            ; quo is CXAX, rem is DX
  XCHG CX,DX        ; quo is DXAX, rem is CX
  RET


OUT_DEC_AX:
  PUSH BX          ; preserve register across call
  MOV BX,010A      ; BH=1 at least 1 digit, BL=10 decimal base
L0:
  PUSH AX,DX       ; preserve registers across call
  MOV DX,03000     ; DH=zero-pad, DL=0 high byte of DLAX
  CALL NUMOUT      ; output the number
  POP DX,AX,BX     ; restore clobbered registers
  RET

        #if ref OHEX_16
OHEX_16:
  PUSH BX          ; preserve register across call
  MOV BX,0410      ; BH=4 4-digit output, BL=16 hexadecimal base
  JMP L0           ; jump to join common code with OUT_DEC_AX
        #endif

        #if ref OUT_HEX_AL
; OUT_HEX_AL outputs hex AL to ES:DI, advancing DI.

OUT_HEX_AL:
  PUSH BX          ; preserve register across call
  MOV BX,0210      ; BH=2 2-digit output, BL=16 hexadecimal base
L1:
  MOV AH,0         ; high byte will be zero
  JMP L0           ; jump to join common code with OUT_DEC_AX
        #endif

        #if ref OCT_AX
OCT_AX:
  PUSH BX          ; preserve register across call
  MOV BX,0608      ; BH=1 at least 6 digits, BL=8 octal base
  JMP L0           ; jump to join common code with OUT_DEC_AX
        #endif

        #if ref OCT_AL
OCT_AL:
  PUSH BX          ; preserve register across call
  MOV BX,0308      ; BH=1 at least 3 digits, BL=8 octal base
        #if ref OUT_HEX_AL
  JMP L1           ; jump to zero AH, join common code with OUT_DEC_AX
        #else
  MOV AH,0         ; high byte will be zero
  JMP L0           ; jump to join common code with OUT_DEC_AX
        #endif
        #endif
