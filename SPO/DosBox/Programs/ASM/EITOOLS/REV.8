        ;---------------                         Copr.2000 Eric Isaacson
LINE_FILTER   REV                              ; See EILIB.TXT for terms
        ;---------------

; REV reverses all lines of standard input -- each line of output is
;   backwards from the input line.

PROCESS_LINE:          ; filter the line which is CX bytes at SI--DI, to BP
  DEC DI               ; decrement beyond-pointer back to linefeed
  CMP B[DI-1],0D       ; is there also a CR terminating this line?
  IF E DEC DI          ; if yes then decrement back to the CR, also
  CALL REV_STRING      ; reverse the characters of the line
  JMP OUT_PROCESS_LINE ; output the resulting line


; REV_STRING reverses the string running from DS:SI through DS:DI-1.  We do so
;    by repeatedly exchanging the bytes pointed to by each pointer, then moving
;    the pointers in towards each other, until they meet.

REV_STRING:
  CMP SI,DI         ; is there any string there?
  JE RET            ; return if not-- nothing to do
  PUSH SI,DI        ; save registers across call
L1:                 ; loop here for each pair of bytes
  LODSB             ; fetch the SI-pointed byte
  DEC DI            ; decrement DI to the last byte of the remaining string
  XCHG AL,[DI]      ; exchange the SI-pointed byte with the DI-pointed byte
  MOV [SI-1],AL     ; store the DI-pointed byte in the SI-pointed spot
  CMP SI,DI         ; have SI and DI come together yet?
  JB L1             ; loop if not to swap two more end-bytes
  POP DI,SI         ; restore clobbered registers
  RET
