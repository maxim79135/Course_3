;---------------                                 Copr.2000 Eric Isaacson
;   DISGUISE                                     See EILIB.TXT for terms
;---------------

; DISGUISE is a filter that transforms assembly-language source files
;   in a manner that makes them functionally identical from A86's point
;   of view, but which renders the source code useless.  All comments
;   are removed, strings are converted to all x's, and all register-to-
;   register instructions are converted to BX,SI pairs.

; The purpose of this program is to allow my A86 customers to send me
; source files that demonstrate problems with A86, without having to
; worry about the confidentiality of those files.

        DATA SEGMENT
OBUFF:                  ; output buffer
  DB 04000 DUP ?
OBUFF_LIM:              ; overflow area for the output buffer
  DB 0400 DUP ?
        DATA ENDS

  JMP DISGUISE        ; jump around the following messages

SIGNON:
  DB 0D,0A,0A
  DB 'DISGUISE source file disguising tool, V1.1',0D,0A
  DB '   Copyright 2000 Eric Isaacson.',0D,0A,0D,0A,0

USAGE_MSG:
  DB 'usage: DISGUISE *.8',0D,0A
  DB '   ruins all .8 source files, but they remain equivalent to A86',0D,0A
  DB 0
  DB 01A

WARNING:
  DB 7,'WARNING!  WARNING!',07,0D,0A,0D,0A
  DB 'This program will render all your named source files unusuable.',0D,0A
  DB 'You should copy all those source files to a junk directory, and',0D,0A
  DB 'make that directory the current directory before running this',0D,0A
  DB 'program.',0D,0A,0D,0A
  DB 'Are you **SURE** you have done so? ',0

DOING_IT:
  DB 0D,0A,0D,0A
  DB 'Now modifying the source files...',0

DONE:
  DB 0D,'The modifications are complete.  The old versions have been',0D,0A
  DB 'saved in *.BAK.',0D,0A,0D,0A,0

DISGUISE:
  MOV AX,SIGNON         ; point to the signon message
  CALL EMESSAGE         ; output the signon message
  MOV SI,081            ; point to our invocation command tail
  CALL TAIL_BLANKS      ; skip over any leading blanks
  CMP AL,0D             ; was there nothing in the command tail?
  IF E JMP USAGE_EXIT   ; abort with usage message if there was nothing
  MOV AX,WARNING        ; point to warning message
  CALL EMESSAGE         ; output the warning message
  MOV AH,1              ; MS-DOS function code for GET_SINGLE_KEY
  INT 021               ; set AL to a single input keystroke
  AND AL,0DF            ; coerce the input key to upper-case
  CMP AL,'Y'            ; did the user respond Yes?
  JNE >L9               ; exit the program if not
  MOV AX,DOING_IT       ; point to message saying we are modifying source files
  CALL EMESSAGE         ; output the "modifying..." message
  CALL WILD_MODBAK      ; call MODBAK_REC for each buffer of each named file
  MOV AX,DONE           ; point to "The modifications are complete"
  CALL EMESSAGE         ; output "The modifications are complete"
L9:                     ; common exit
  JMP GOOD_EXIT         ; go back to operating system



; MODBAK_REC processes the line pointed to by SI (and beyond by DX), and
;    copies the line to DI.

L2:                 ; label seen at the start of a line
  POP SI            ; restore the pointer to the start of the label
L3:                 ; loop here to output each character of the label
  CALL COERCE_OUT   ; output a character
  CMP AL,':'        ; was it the colon?
  JNE L3            ; loop if not
  CALL SKIP_BLANKS  ; see what follows the colon
  CMP AL,0A         ; is there nothing more?
  MOV AX,0A0D       ; there is contents: load CRLF
  STOSW             ; put the label on its own line
  JE RET            ; exit if so
MODBAK_REC:
  CALL SKIP_BLANKS  ; skip any leading blanks
  CMP AL,0A         ; was it a blank line?
  JE RET            ; jump if yes, to output CRLF only
  PUSH SI           ; content line: save starting pointer
L1:                 ; loop here to look for a colon
  LODSB             ; fetch a character
  CMP AL,':'        ; is it a colon?
  JE L2             ; jump if yes, we have a label
  CMP AL,';'        ; is it a semicolon?
  IF NE CMP AL,' '  ; if not a semicolon is it a blank?
  JA L1             ; loop if neither a semicolon nor a blank
  POP SI            ; no colon seen: restore starting pointer
L4:                 ; loop here for each byte of statement contents
  MOV AL,[SI]       ; fetch the letter
  CMP AL,0D         ; is it the end of the line?
  JE >L8            ; jump if yes
  CMP AL,''''       ; is it a string?
  JE >L6            ; jump if yes
  CMP AL,'"'        ; is it a string?
  JE >L6            ; jump if yes
  CMP AL,';'        ; is it a semicolon?
  IF NE CMP AL,' '  ; if not is it a blank?
  JBE >L3           ; jump if it is either a semicolon or a blank
  CALL COERCE_OUT   ; nothing special: coerce and output the byte
  JMP L4            ; loop for another byte

L3:                 ; semicolon or blank was seen
  MOV AL,' '        ; load blank
  STOSB             ; output a blank
  CALL SKIP_BLANKS  ; skip any further blanks
  CMP AL,0A         ; have we reached the end of the line?
  JNE L4            ; loop if not, to continue processing the line
  DEC DI,SI,SI      ; retreat back to the CRLF for both input and output
L8:                 ; end of line was seen
  CALL COERCE_REGS  ; if the line ends with reg,reg then change the regs
  MOVSW             ; output CRLF
  RET

L6:                 ; string was seen, delimiter AL
  MOV AH,AL         ; save delimiter in AH
  MOVSB             ; output the opening delimiter
L1:                 ; loop here to find closing delimiter
  LODSB             ; fetch string character
  CMP AL,AH         ; is it the delimiter?
  PUSHF             ; save the flags during the following check
  CMP AL,'#'        ; is it a macro-marker character?
  IF NE MOV AL,'x'  ; if not then replace the character with an "x"
  POPF              ; restore delimiter-found flag       
  STOSB             ; output the filtered string character
  JNE L1            ; loop if not
  ES MOV B[DI-1],AH ; closing delimiter seen: place it into the output
  JMP L4            ; jump back to the main loop


SKIP_LINE:          ; advance SI to the next line
  LODSB             ; fetch a byte from the line
  CMP AL,0A         ; is it the terminating linefeed?
  JNE SKIP_LINE     ; loop if not, to continue scanning the line
  RET

SKIP_BLANKS:        ; skip over the SI-pointed blank area or comment
  LODSB             ; fetch a byte
  CMP AL,0A         ; is it the terminating linefeed?
  JE RET            ; return if it is
  CMP AL,' '        ; is it a blank or below?
  JBE SKIP_BLANKS   ; loop if it is, to continue skipping
  CMP AL,';'        ; is it a comment?
  JE SKIP_LINE      ; if yes then skip the remainder of the line
  DEC SI            ; nonblank seen: retreat back to the nonblank byte
  RET


; COERCE_OUT copies a byte from SI to DI, coercing to upper case, and
;   inserting an underscore of there is a lower-to-upper transition.
;   Input DH is nonzero if the previous character was lower case.
;   DH is updated for the next call to us.

COERCE_OUT:
  LODSB             ; fetch character
  CMP AL,'a'        ; too low for lower case?
  JB >L2            ; jump if yes, to non-coercion exit
  CMP AL,'z'        ; lower case letter?
  JA >L2            ; jump if not, to non-coercion exit
  AND AL,0DF        ; coerce to upper case
L2:                 ; upper case letter seen
  STOSB             ; output the coerced letter
  RET


; COERCE_REGS is called with DI pointing beyond the last byte of an output
;   line.  We check to see if the line ends with two general-register operands.
;   If it does, we change the operands to BX,SI if they are 16-bit; DL,CL
;   if they are 8-bit.

L1:                       ; list of 16-bit general registers
  DB 'BXSICXDXDIBPSPSP'
L2:                       ; list of 8-bit general registers
  DB 'DLCLALAHBLBHCHDH'

COERCE_REGS:
  ES CMP B[DI-6],' '    ; is there a blank in the necessary slot?
  JNE RET               ; return if not
  ES CMP B[DI-3],','    ; is there a comma in the necessary slot?
  JNE RET               ; return if not
  ES MOV AX,[DI-5]      ; fetch the first register operand from the output line
  ES MOV BX,[DI-2]      ; fetch the second register operand as well
  MOV CX,L1             ; point to the 16-bit registers
  CALL CHECK_REGS       ; check our values for 16-bit registers
  MOV CX,L2             ; point to the 8-bit registers and drop to check them
CHECK_REGS:
  CALL CHECK_REG        ; check to see if AX is a register name from table CX
  JNE RET               ; return if is it not
  XCHG AX,BX            ; AX was found: swap in the other register name
  CALL CHECK_REG        ; check the other register name
  JNE RET               ; return if it was not found
  PUSH SI               ; both were register names: save the input pointer
  MOV SI,CX             ; point SI to our names table
  SUB DI,5              ; retreat to the first register's output slot
  CS MOVSW              ; replace the first register with the first table value
  INC DI                ; skip over the intervening comma
  CS MOVSW              ; replace the second register with the 2nd table value
  POP SI                ; restore the input pointer
  RET


CHECK_REG:              ; set Z if AX is in the CX pointed, 8-word table
  PUSH ES,DI,CX         ; save registers across call
  MOV ES,CS             ; point ES to our program segment, for scanning
  MOV DI,CX             ; point DI to the 8-word table
  MOV CX,8              ; load the word count
  REPNE SCASW           ; scan for AX within the table
  POP CX,DI,ES          ; restore clobbered registers
  RET

