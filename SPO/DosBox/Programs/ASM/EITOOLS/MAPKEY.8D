;---------------                                 Copr.2000 Eric Isaacson
;   MAPKEY                                       See EILIB.TXT for terms
;---------------

; MAPKEY performs a remapping of certain hardware keystrokes on an old AST
;   notebook computer, by plugging a specific BIOS queue code when one or
;   more consecutive scan codes are seen.  We also provide an extended
;   typeahead, by redirecting the BIOS's key queue pointers.

; You could modify the codes to rearrange the keys on your notebook computer --
; the KCODES program can assist you in determining the codes generated by your
; keys.

; The code in this module is executed only during the boot-up
; initialization of the computer; so we do not need to do function-
; number parsing.

ORG 0

      DD -1          ; slot for pointer to the next driver in the chain
      DW 08000       ; character device with no special attributes
      DW STRATEGY    ; pointer to the parm block pointer store routine
      DW INTERRUPT   ; pointer to the service routine
      DB 'MAPKE+++'  ; garbage name: we are not really a device

CODES:
  DB ?,?,?,?                    ; slots for the last 4 typed codes
  DB 4,037,0E0,02A,0E0,02D,04A  ; PrtSc maps to Num-
  DB 2,0FA,046,02B,04E          ; ScrollLock maps to Num+
  DB 3,045,01D,0E1,02A,037      ; Pause/Break maps to Num*
  DB 0                          ; terminating null

L0:                       ; jump here if we are not taking action ourselves
  POP AX                  ; restore clobbered register
  JMP 0:0                 ; jump to old handler
OLD_HANDLER EQU W[$-4]    ; old handler's address is plugged into above slot

OUR_HANDLER:
  STI                     ; we allow interrupts during this servicing
  PUSH AX,CX,SI,DI,DS,ES  ; preserve registers
  MOV AX,040              ; point to BIOS segment
  MOV DS,AX               ; point DS to BIOS segment
  MOV ES,AX               ; point ES to BIOS segment
  AND B[017],0EF          ; insure Scroll-Lock is always off
  MOV SI,CODES+2          ; point to next-to-last gathered code
R1 EQU W[$-2]             ; above pointer is adjusted as offset-from-BIOS
  LEA DI,[SI+1]           ; point DI to the last gathered code
  MOV CX,3                ; there are 3 bytes to move
  STD                     ; copying is backwards
  REP MOVSB               ; make room for latest code by shoving last 3 down
  CLD                     ; restore forward scanning
  IN AL,060               ; fetch the latest code
  MOV [DI],AL             ; store the code in our last-codes buffer
  LEA SI,[DI+4]           ; point to our table of codes we're looking for
L1:                       ; loop here for each record in the table
  ADD SI,CX               ; advance the pointer to the next record
  LODSB                   ; fetch the code count
  MOV CL,AL               ; set CX to the code count
  JCXZ >L3                ; jump if the terminating null was seen
  PUSH DI                 ; save CODES pointer
  REPE CMPSB              ; does this sequence match?
  POP DI                  ; restore CODES pointer
  LODSW                   ; fetch the new codes, in case it does
  JNE L1                  ; loop if it doesn't, to look at another record
  CLI                     ; we have a match: avoid interrupts while inserting
  MOV SI,[01C]            ; fetch the pointer beyond the last word queued
  MOV [SI],AX             ; place our keycodes into the next slot
  INC SI,2                ; advance to the slot after that
  CMP SI,[082]            ; has the buffer pointer reached the end?
  IF AE MOV SI,[080]      ; if yes then cycle back to the start
  CMP SI,[01A]            ; have we bumped up against the read-pointer?
  IF NE MOV [01C],SI      ; if not then reset the beyond-queue pointer
  STI                     ; insert complete: we can tolerate interrupts again
  CMP AL,AL               ; Z flag signals we should not call OLD_HANDLER
L3:                       ; jump here with NZ if we should call OLD_HANDLER
  POP ES,DS,DI,SI,CX      ; restore all clobbered registers except AX
  JNE L0                  ; loop if we should call the old handler
  MOV AL,020              ; control byte that will reset the key interrupt
  OUT 020,AL              ; reset the key interrupt
  POP AX                  ; restore clobbered register
  IRET


KEYBUFF:

  RH_OFFSET  DW ?       ; parameter block offset is stored here
  RH_SEG     DW ?       ; parameter block segment is stored here

STRATEGY:               ; parameter-passing procedure
  CS MOV RH_SEG,ES      ; store the parameter block's segment
  CS MOV RH_OFFSET,BX   ; store the parameter block's offset
  RETF

INTERRUPT:                  ; initialization procedure
  PUSH AX,BX,DX,SI,DI,DS,ES ; preserve registers across call
  MOV AX,03509              ; MS-DOS function code for GET_KEY_INT
  INT 33                    ; point ES:BX to the existing INT 9 handler
  MOV OLD_HANDLER W,BX      ; store the old handler offset
  MOV OLD_HANDLER W[2],ES   ; store the old handler segment
  MOV DS,CS                 ; point DS to our code segment
  MOV DX,OUR_HANDLER        ; point DX to our new handler
  MOV AX,02509              ; MS-DOS function codes for SET_KEY_INT
  INT 33                    ; keystrokes are now handled by OUR_HANDLER
  LDS SI,RH_OFFSET          ; fetch the caller's parameter block pointer
  PUSH DS,SI                ; save the pointer
  LDS SI,[SI+18]            ; fetch the pointer to the CONFIG.SYS command tail
L0:                         ; loop here to skip over our own path name
  LODSB                     ; fetch a byte
  CMP AL,020                ; is it blank?
  JA L0                     ; loop if not
L1:                         ; loop here to skip over intervening blanks
  LODSB                     ; fetch a byte
  CMP AL,020                ; is it blank?
  JBE L1                    ; loop if yes
  MOV BX,64                 ; load the default key buffer count
  CMP AL,'0'                ; is the tail character too low to be a digit?
  JB >L3                    ; skip if yes, to use the default
  CMP AL,'9'                ; is the tail character too high to be a digit?
  JA >L3                    ; skip if yes, to use the default
  SUB BX,BX                 ; digit is seen: init BX, to accumulate value there
L2:                         ; loop here for each digit of the number
  SUB AL,'0'                ; reduce the digit to a binary value
  MOV DX,10                 ; load multiplicand, it is also the digit-limit value
  CMP AL,DL                 ; is it in fact another decimal digit?
  JAE >L3                   ; jump if not to exit this procedure
  CBW                       ; extend value AL to AX
  XCHG AX,BX                ; swap previous accumulation into AX, new digit into BX
  MUL DX                    ; multiply the previous accumulation by 10
  ADD BX,AX                 ; add into the new digit value
  LODSB                     ; load the next digit
  JMP L2                    ; loop to accumulate another digit

L3:                         ; decimal scanning is complete
  INC BX                    ; add one word for the key-queueing logic
  MOV DX,CS                 ; fetch our own code segment
  MOV AX,0103E              ; load the highest value our segment can be
  SUB AX,DX                 ; calculate the number of available buffer paragraphs
  JBE >L4                   ; skip if there are no paragraphs available
  MOV SI,8                  ; load multiplier
  MUL SI                    ; convert the paragraph count to a word count
  CMP AX,BX                 ; are there the requested number of words?
  IF B XCHG BX,AX           ; if not then supply what we can
  ADD SI,SI                 ; double SI=8 to SI=16
  CMP BX,SI                 ; are there at least 16 keystrokes in the buffer?
  JB >L4                    ; skip if not: no point in special-buffering
  MOV AX,CS                 ; fetch our code segment
  SUB AX,040                ; calculate the paragraph offset from the BIOS segment
  MUL SI                    ; convert it to the byte offset
  CS ADD R1,AX              ; adjust our offset reference to be from BIOS
  ADD AX,KEYBUFF            ; we now have KEYBUFF's offset from the BIOS segment
  MOV DS,SI                 ; DS=16 will allow us to address the BIOS variables
  CMP W[0380],01E           ; is the start-of-buffer pointer being maintained?
  JNE >L4                   ; skip if not
  CLI                       ; we cannot tolerate interrupts while resetting BIOS
  MOV [031A],AX             ; reset the key-output pointer to KEYBUFF
  MOV [031C],AX             ; reset the key-input pointer to KEYBUFF
  MOV [0380],AX             ; set the buffer start to KEYBUFF
  ADD BX,BX                 ; convert the buffer's word count into a byte count
  ADD AX,BX                 ; advance AX beyond the buffer
  MOV [0382],AX             ; set the buffer limit beyond our buffer
  STI                       ; we can tolerate interrupts again
  XCHG AX,BX                ; swap the buffer byte count into AX
  ADD AX,KEYBUFF            ; advance AX beyond our buffer
  DB 03D                    ; skip over the following SUB AX,AX
L4:                         ; jump here if we aborted the installation
  SUB AX,AX                 ; resident count is zero if we abort
  POP SI,DS                 ; restore the caller's parameter block pointer
  MOV W[SI+14],AX           ; store the allocation offset
  MOV [SI+16],CS            ; store the allocation segment
  MOV W[SI+3],0100          ; return code for DONE
  POP ES,DS,DI,SI,DX,BX,AX  ; restore clobbered registers
  RETF

