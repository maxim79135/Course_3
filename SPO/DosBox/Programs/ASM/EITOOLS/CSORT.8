;---------------                                 Copr.2000 Eric Isaacson
;   CSORT                                        See EILIB.TXT for terms
;---------------

; CSORT sorts the file whose name is given as the second argument in the
;   command tail.  We do the fastest possible sort, with a simple lexicographic
;   ordering of lines, skipping the first N bytes of the line, where N is
;   the decimal number present as the first command-tail argument.

JMP CSORT             ; skip over the following message

  DB 0D,0A,0A
USAGE_MSG:
  DB 'CSORT, V1.2  Copyright 2000 Eric Isaacson.  All rights reserved.',0D,0A
  DB 'usage: CSORT colnum infile [outfile]',0D,0A
  DB 0,01A

GEN_SORTP EQU GEN_NONBLANK_LINE   ; we are sorting nonblank lines
COPY_SORTREC EQU COPY_LINE        ; record output is a simple line-copy

CSORT:
  MOV SI,081          ; point to our invocation command tail
  CALL TAIL_BLANKS    ; skip over leading blanks
  CMP AL,'!'          ; do we see our special flip-operator?
  JNE >L1             ; skip if not
  INC SI              ; flip-operator seen: advance beyond it
  MOV FLIPCODE B,090  ; enable the reversal of all COMPARE results
L1:
  CALL VERIFY_DEC     ; there had better be a decimal argument: get it
  MOV COL1,AX         ; store the number of columns to be skipped
  MOV COL2,AX         ; skip count is stored in two places
  PUSH SI             ; save file pointer, in case only one name is given
  CALL OPEN_I_ARG     ; open the input file
  CALL TAIL_BLANKS    ; skip over intervening blanks
  CMP AL,0D           ; is there a second file name?
  POP AX              ; restore first pointer, in case there isn't
  IF E XCHG SI,AX     ; swap in the first pointer if there was no input name
  CALL FILE_ARG       ; scan the SI-pointed file argument
  CALL LSORT_IHANDLE  ; sort the file
  JMP GOOD_EXIT       ; exit our program


; COMPARE is the comparison routine we provide to satisfy SIDI_SORT and LSORT.
;   We do a simple lexicographic comparison of BP-[BX].

COMPARE:
  LEA SI,[BP+01234]   ; point SI to the first string
COL1 EQU W[$-2]       ; column number is plugged into the above imm value
  ES MOV DI,[BX]      ; point DI to the second string
  ADD DI,01234        ; advance DI by the column number
COL2 EQU W[$-2]       ; column number is plugged into the above imm value
  MOV CH,1            ; load count of at least 256
  REPE CMPSB          ; compare the strings
FLIPCODE:
  RET                 ; return if we are not doing a reverse sort
;
; Reverse sort drops through to the following:
;
  IF NE CMC           ; if not equal then reverse the comparison result
  RET



