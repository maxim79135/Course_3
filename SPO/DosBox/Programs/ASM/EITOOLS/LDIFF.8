;---------------                                 Copr.2000 Eric Isaacson
;   LDIFF                                        See EILIB.TXT for terms
;---------------

; LDIFF compares the first two files named in its invocation cammand tail,
;   and outputs a summary to the third named file.  The input files must
;   match each other line-for-line: that is, each line from one file has a
;   corresponding line in the other, with no lines deleted.  The output file
;   will have a minus sign - prepended to lines from the first file, and
;   a plus sign + prepended to lines from the second file.  Lines that
;   match exactly are not output.

LDIFF:
  MOV SI,081        ; point to our invocation command tail
  CALL MERGE_21     ; perform a 2-files-to-1 merge operation
  JMP GOOD_EXIT     ; exit the program

; PROCESS_MERGE is called by MERGE_21 to perform a single merge operation.
;   We are called with SI pointing to and DX beyond the first file's bytes,
;   BX pointing to and BP beyond the second file's bytes, and DI pointing
;   to where we should output.  We compare the lines and take appropriate
;   action: if the lines are the same we skip past them both.  Otherwise
;   we output whichever line comes first.

L0:                 ; jump here if either buffer is empty, to empty the other
  MOV SI,DX         ; make the first buffer empty
  MOV BX,BP         ; make the second buffer empty as well
  RET

PROCESS_MERGE:
  CMP SI,DX         ; is the first file exhausted?
  JAE L0            ; jump if yes, to cancel the second file
  LODSB             ; fetch the next character from the first file
  CMP AL,' '        ; was it a control character?
  JB RET            ; return if so, to ignore it
  DEC SI            ; not a control character: retreat back to it
  CMP BX,BP         ; is the second file exhausted?
  JAE L0            ; jump if yes, to cancel the first file
  MOV AL,[BX]       ; fetch the first character in the second file's line
  INC BX            ; advance the second file's buffer pointer
  CMP AL,' '        ; was it a control character?
  JB RET            ; return if so, to ignore it
  DEC BX            ; not a control character: retreat back to it
  PUSH DI           ; preserve the output pointer
  MOV DI,SI         ; point to first buffer
  MOV CX,DX         ; load the first buffer's limit
  CALL LSIZE        ; get the first line size
  MOV DX,CX         ; store the size in DX
  MOV DI,BX         ; point to second buffer
  MOV CX,BP         ; load the second buffer's limit
  CALL LSIZE        ; get the second line size
  MOV BP,CX         ; store the size in BP
  CMP DX,BP         ; are the two line sizes the same?
  JNE >L1           ; jump if not, to output the lines
  MOV DI,BX         ; sizes are the same: point DI to the second buffer
  PUSH SI           ; save the first buffer pointer
  REPE CMPSB        ; are the lines the same?
  POP SI            ; restore the first buffer pointer
  JNE >L1           ; jump if the lines are different, to output them
  ADD SI,DX         ; lines match: advance SI beyind the first file's line
  ADD BX,BP         ; advance BX beyond the second file's line
  POP DI            ; restore the output pointer
  RET

L1:                 ; the lines are different
  POP DI            ; restore the output pointer
  MOV AL,'-'        ; load minus sign
  STOSB             ; output a minus sign to precede the first file's line
  MOV CX,DX         ; fetch the first line count
  REP MOVSB         ; output the first line
  MOV AL,'+'        ; load plus sign
  STOSB             ; output a plus sign to precede the second file's line
  XCHG SI,BX        ; swap in the second buffer pointer
  MOV CX,BP         ; fetch the second line's count
  REP MOVSB         ; output the second line
  XCHG BX,SI        ; swap the first and second pointers back to their places
  RET


; LSIZE sets CX to the number of bytes in the line pointed to by DI.  Input
;   CX points beyond the buffer in which we are looking for a linefeed.

LSIZE:
  PUSH DI           ; save the starting buffer pointer
  SUB CX,DI         ; calculate the number of buffered bytes
  MOV AL,0A         ; load linefeed, for searching
  REPNE SCASB       ; advance DI beyond linefeed or buffer
  POP AX            ; restore to AX the starting pointer
  MOV CX,DI         ; copy ending pointer to CX
  SUB CX,AX         ; calculate the number of bytes advanced
  RET


USAGE_MSG:
  DB 'usage: LDIFF old_file new_file summary_file',0D,0A,0


